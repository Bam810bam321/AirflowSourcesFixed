#include "displacement.h"
#include "memory.h"

#include <Psapi.h>

namespace modules
{
  HMODULE client{ };
  HMODULE server{ };
  HMODULE engine{ };
  HMODULE materialsystem{ };
  HMODULE tier0{ };
  HMODULE shaderapidx9{ };
  HMODULE vgui2{ };
  HMODULE inputsystem{ };
  HMODULE vstdlib{ };
  HMODULE localize{ };
  HMODULE datacache{ };
  HMODULE studiorender{ };
  HMODULE vguimatsurface{ };
  HMODULE vphysics{ };
  HMODULE gameoverlayrenderer{ };

  __forceinline void init( )
  {
    client = GetModuleHandleA( xor_c_s( "client.dll" ) );
    server = GetModuleHandleA( xor_c_s( "server.dll" ) );
    engine = GetModuleHandleA( xor_c_s( "engine.dll" ) );
    materialsystem = GetModuleHandleA( xor_c_s( "materialsystem.dll" ) );
    tier0 = GetModuleHandleA( xor_c_s( "tier0.dll" ) );
    shaderapidx9 = GetModuleHandleA( xor_c_s( "shaderapidx9.dll" ) );
    vgui2 = GetModuleHandleA( xor_c_s( "vgui2.dll" ) );
    inputsystem = GetModuleHandleA( xor_c_s( "inputsystem.dll" ) );
    vstdlib = GetModuleHandleA( xor_c_s( "vstdlib.dll" ) );
    localize = GetModuleHandleA( xor_c_s( "localize.dll" ) );
    datacache = GetModuleHandleA( xor_c_s( "datacache.dll" ) );
    studiorender = GetModuleHandleA( xor_c_s( "studiorender.dll" ) );
    vguimatsurface = GetModuleHandleA( xor_c_s( "vguimatsurface.dll" ) );
    vphysics = GetModuleHandleA( xor_c_s( "vphysics.dll" ) );
    gameoverlayrenderer = GetModuleHandleA( xor_c_s( "gameoverlayrenderer.dll" ) );
  }
}

namespace patterns
{
  c_address get_name{ };
  c_address init_key_values{ };
  c_address load_from_buffer{ };
  c_address list_leaves_in_box{ };
  c_address get_color_modulation{ };
  c_address draw_models{ };
  c_address using_static_prop_debug{ };
  c_address load_named_sky{ };
  c_address disable_post_process{ };
  c_address post_process_data{ };
  c_address return_addr_drift_pitch{ };
  c_address return_addr_apply_shake{ };
  c_address remove_smoke{ };
  c_address remove_fog{ };
  c_address check_file_crc_with_server{ };
  c_address set_view_model_offsets{ };
  c_address prediction_random_seed{ };
  c_address prediction_player{ };
  c_address physics_run_think{ };
  c_address think{ };
  c_address move_helper{ };
  c_address beam{ };
  c_address add_view_model_bob{ };
  c_address calc_view_model_bob{ };
  c_address input{ };
  c_address player_resource{ };
  c_address game_rules{ };
  c_address inventory_access{ };
  c_address create_animstate{ };
  c_address reset_animstate{ };
  c_address update_animstate{ };
  c_address client_state{ };
  c_address set_abs_angles{ };
  c_address set_abs_origin{ };
  c_address should_skip_anim_frame{ };
  c_address modify_eye_position{ };
  c_address setup_bones{ };
  c_address update_clientside_animation{ };
  c_address build_transformations{ };
  c_address standard_blending_rules{ };
  c_address do_extra_bone_processing{ };
  c_address return_addr_setup_velocity{ };
  c_address return_addr_accumulate_layers{ };
  c_address return_addr_reevaluate_anim_lod{ };
  c_address return_addr_extrapolation{ };
  c_address return_addr_setup_bones{ };
  c_address return_addr_loadout_allowed{ };
  c_address get_bone_merge{ };
  c_address get_pose_parameter{ };
  c_address update_merge_cache{ };
  c_address ik_context_ptr{ };
  c_address invalidate_bone_cache{ };
  c_address copy_to_follow{ };
  c_address copy_from_follow{ };
  c_address add_dependencies{ };
  c_address attachments_helper{ };
  c_address ik_ctx_construct{ };
  c_address ik_ctx_destruct{ };
  c_address ik_ctx_init{ };
  c_address ik_ctx_update_targets{ };
  c_address ik_ctx_solve_dependencies{ };
  c_address bone_setup_init_pose{ };
  c_address accumulate_pose{ };
  c_address bone_setup_calc_autoplay_sequences{ };
  c_address bone_setup_calc_bone_adjust{ };
  c_address studio_hdr_ptr{ };
  c_address invalidate_physics_recursive{ };
  c_address trace_filter{ };
  c_address trace_filter_skip_entities{ };
  c_address clip_ray_to_hitboxes{ };
  c_address lookup_bone{ };
  c_address physics_simulate{ };
  c_address write_user_cmd{ };
  c_address send_move_addr{ };
  c_address view_render{ };
  c_address post_think_physics{ };
  c_address simulate_player_simulated_entities{ };
  c_address cl_move{ };
  c_address glow_object{ };
  c_address draw_hitbox{ };
  c_address server_edict{ };
  c_address model_renderable_animating{ };
  c_address setup_clr_modulation{ };
  c_address calc_viewmodel_view{ };
  c_address set_collision_bounds{ };
  c_address get_hud_ptr{ };
  c_address find_hud_element{ };
  c_address get_sequence_activity{ };
  c_address return_addr_cam_think{ };
  c_address send_net_msg{ };
  c_address assign_str{ };
  c_address process_packet{ };
  c_address direct_reset{ };
  c_address direct_present{ };
  c_address direct_device{ };
  c_address screen_matrix{ };
  c_address local{ };
  c_address global_vars{ };
  c_address interpolate_server_entities{ };
  c_address read_packets{ };
  c_address calc_view{ };
  c_address add_renderable{ };
  c_address perform_screen_overlay{ };
  c_address render_glow_boxes{ };
  c_address clear_killfeed{ };
  c_address clip_ray_to_hitbox{ };
  c_address read_packets_return_addr{ };
  c_address compute_hitbox_surrounding_box{ };
  c_address clantag{ };
  c_address is_in_ironsight{ };
  c_address update_postscreen_effects{ };
  c_address is_breakable_entity{ };
  c_address process_interpolated_list{ };
  c_address allow_extrapolation{ };
  c_address get_exposure_range{ };
  c_address temp_entities{ };
  c_address send_datagram{ };
  c_address thread_id_allocated{ };
  c_address trace_filter_to_head_collision{ };
  c_address want_reticle_shown{ };
  c_address return_addr_process_input{ };
  c_address viewmodel_interpolate{ };
  c_address calc_shotgun_spread{ };
  c_address weapon_shootpos{ };
  c_address item_system{ };
  c_address show_and_update_selection{ };
  c_address update_all_viewmodel_addons{ };
  c_address get_viewmodel{ };
  c_address calc_absolute_position{ };
  c_address clientside_animation_list{ };

  c_address get_weapon_prefix{ };
  c_address find_mapping{ };
  c_address select_sequence_from_mods{ };

  __forceinline void init( )
  {
    get_name = g_memory->find_pattern( modules::client, xor_c_s( "56 8B 35 ? ? ? ? 85 F6 74 21 8B 41" ) );
    init_key_values = g_memory->find_pattern( modules::client, xor_c_s( "8B 0E 33 4D FC 81 E1 ? ? ? ? 31 0E 88 46 03 C1 F8 08 66 89 46 12 8B C6" ) ).sub( 0x45 );
    load_from_buffer = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 83 EC 34 53 8B 5D 0C 89" ) );
    list_leaves_in_box = g_memory->find_pattern( modules::client, xor_c_s( "FF 52 18 8B 7D 08 8B" ) ).add( 3 );
    get_color_modulation = g_memory->find_pattern( modules::materialsystem, xor_c_s( "55 8B EC 83 EC ? 56 8B F1 8A 46" ) );
    draw_models = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 51 8B 45 18" ) );
    using_static_prop_debug = g_memory->find_pattern( modules::engine, xor_c_s( "8B 0D ? ? ? ? 81 F9 ? ? ? ? 75 ? A1 ? ? ? ? 35 ? ? ? ? EB ? 8B 01 FF 50 ? 83 F8 ? 0F 85 ? ? ? ? 8B 0D" ) );
    load_named_sky = g_memory->find_pattern( modules::engine, xor_c_s( "55 8B EC 81 EC ? ? ? ? 56 57 8B F9 C7 45" ) );
    disable_post_process = g_memory->find_pattern( modules::client, xor_c_s( "80 3D ? ? ? ? ? 53 56 57 0F 85" ) ).add( 2 );
    post_process_data = g_memory->find_pattern( modules::client, xor_c_s( "0F 11 05 ? ? ? ? 0F 10 87" ) ).add( 3 );
    return_addr_drift_pitch = g_memory->find_pattern( modules::client, xor_c_s( "84 C0 75 0B 8B 0D ? ? ? ? 8B 01 FF 50 4C" ) );
    return_addr_apply_shake = g_memory->find_pattern( modules::client, xor_c_s( "84 C0 75 24 A1 ? ? ? ? B9 ? ? ? ? FF 50 1C A1 ? ? ? ? 51 C7 04 24 ? ? 80 3F B9 ? ? ? ? 53 57 FF 50 20" ) );
    remove_smoke = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 EC 08 8B 15 ? ? ? ? 0F 57 C0" ) ).add( 8 );
    remove_fog = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 8B 0D ? ? ? ? 83 EC 0C 8B 01 53" ) );
    check_file_crc_with_server = g_memory->find_pattern( modules::engine, xor_c_s( "55 8B EC 81 EC ? ? ? ? 53 8B D9 89 5D F8 80" ) );
    set_view_model_offsets = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 8B 45 08 F3 0F 7E 45" ) );
    prediction_random_seed = g_memory->find_pattern( modules::client, xor_c_s( "A3 ? ? ? ? 66 0F 6E 86" ) ).add( 1 );
    prediction_player = g_memory->find_pattern( modules::client, xor_c_s( "89 35 ? ? ? ? F3 0F 10 48" ) ).add( 2 );
    physics_run_think = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 EC ? 53 56 57 8B F9 8B 87 ? ? ? ? C1 E8" ) );
    think = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 56 57 8B F9 8B B7 ? ? ? ? 8B C6" ) );
    move_helper = g_memory->find_pattern( modules::client, xor_c_s( "8B 0D ? ? ? ? 8B 45 ? 51 8B D4 89 02 8B 01" ) ).add( 2 );
    beam = g_memory->find_pattern( modules::client, xor_c_s( "B9 ? ? ? ? A1 ? ? ? ? FF 10 A1 ? ? ? ? B9" ) ).add( 1 );
    add_view_model_bob = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC A1 ? ? ? ? 83 EC 20 8B 40 34" ) );
    calc_view_model_bob = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC A1 ? ? ? ? 83 EC 10 56 8B F1 B9" ) );
    input = g_memory->find_pattern( modules::client, xor_c_s( "B9 ? ? ? ? F3 0F 11 04 24 FF 50 10" ) ).add( 1 );
    player_resource = g_memory->find_pattern( modules::client, xor_c_s( "8B 3D ? ? ? ? 85 FF 0F 84 ? ? ? ? 81 C7" ) ).add( 2 );
    game_rules = g_memory->find_pattern( modules::client, xor_c_s( "A1 ? ? ? ? 85 C0 0F 84 ? ? ? ? 80 B8 ? ? ? ? ? 0F 84 ? ? ? ? 0F 10 05" ) ).add( 1 );
    inventory_access = g_memory->find_pattern( modules::client, xor_c_s( "84 C0 75 05 B0 01 5F" ) ).add( 1 );
    create_animstate = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 56 8B F1 B9 ? ? ? ? C7 46" ) );
    reset_animstate = g_memory->find_pattern( modules::client, xor_c_s( "56 6A 01 68 ? ? ? ? 8B F1" ) );
    update_animstate = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 83 EC 18 56 57 8B F9 F3 0F 11 54 24" ) );
    client_state = g_memory->find_pattern( modules::engine, xor_c_s( "A1 ? ? ? ? 8B 80 ? ? ? ? C3" ) );
    set_abs_angles = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 83 EC 64 53 56 57 8B F1 E8" ) );
    set_abs_origin = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 51 53 56 57 8B F1 E8" ) );
    should_skip_anim_frame = g_memory->find_pattern( modules::client, xor_c_s( "57 8B F9 8B 07 8B 80 ? ? ? ? FF D0 84 C0 75 02" ) );
    modify_eye_position = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 83 EC 58 56 57 8B F9 83 7F 60" ) );
    setup_bones = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F0 B8 D8" ) );
    update_clientside_animation = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 51 56 8B F1 80 BE ?? ?? 00 00 00 74 36 8B 06 FF 90 ?? ?? 00 00" ) );
    build_transformations = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 56 8B 75 ? 57 FF 75 ? 8B F9 56" ) );
    standard_blending_rules = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F0 B8 ? ? ? ? E8 ? ? ? ? 56 8B 75 08 57 8B F9 85 F6" ) );
    do_extra_bone_processing = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 81 EC ? ? ? ? 53 56 8B F1 57 89 74 24 1C" ) );
    return_addr_setup_velocity = g_memory->find_pattern( modules::client, xor_c_s( "84 C0 75 38 8B 0D ? ? ? ? 8B 01 8B 80" ) );
    return_addr_accumulate_layers = g_memory->find_pattern( modules::client, xor_c_s( "84 C0 75 0D F6 87" ) );
    return_addr_reevaluate_anim_lod = g_memory->find_pattern( modules::client, xor_c_s( "84 C0 0F 85 ? ? ? ? A1 ? ? ? ? 8B B7" ) );
    return_addr_extrapolation = g_memory->find_pattern( modules::client, xor_c_s( "FF D0 A1 ? ? ? ? B9 ? ? ? ? D9 1D ? ? ? ? FF 50 34 85 C0 74 22 8B 0D ? ? ? ?" ) ).add( 0x29 );
    return_addr_setup_bones = g_memory->find_pattern( modules::client, xor_c_s( "84 C0 0F 84 ? ? ? ? 8B 44 24 24" ) );
    return_addr_loadout_allowed = g_memory->find_pattern( modules::client, xor_c_s( "84 C0 75 04 B0 01 5F" ) );
    get_bone_merge = g_memory->find_pattern( modules::client, xor_c_s( "89 86 ? ? ? ? E8 ? ? ? ? FF 75 08" ) ).add( 2 );
    get_pose_parameter = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 8B 45 08 57 8B F9 8B 4F 04 85 C9 75 15 8B" ) );
    update_merge_cache = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? 83 7E 10 ? 74 64" ) ).rel32( 1 );
    ik_context_ptr = g_memory->find_pattern( modules::client, xor_c_s( "8B 8F ? ? ? ? 89 4C 24 1C" ) );
    invalidate_bone_cache = g_memory->find_pattern( modules::client, xor_c_s( "80 3D ? ? ? ? ? 74 16 A1 ? ? ? ? 48 C7 81" ) );
    copy_to_follow = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? 8B 87 ? ? ? ? 8D 8C 24 ? ? ? ? 8B 7C 24 18" ) ).rel32( 1 );
    copy_from_follow = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? F3 0F 10 45 ? 8D 84 24 ? ? ? ?" ) ).rel32( 1 );
    add_dependencies = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 81 EC BC ? ? ? 53 56 57" ) );
    attachments_helper = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 EC 48 53 8B 5D 08 89 4D F4" ) );
    ik_ctx_construct = g_memory->find_pattern( modules::client, xor_c_s( "56 8B F1 6A 00 6A 00 C7" ) );
    ik_ctx_destruct = g_memory->find_pattern( modules::client, xor_c_s( "56 8B F1 57 8D 8E ? ? ? ? E8 ? ? ? ? 8D 8E ? ? ? ? E8 ? ? ? ? 83 BE ? ? ? ? ?" ) );
    ik_ctx_init = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 EC 08 8B 45 08 56 57 8B F9 8D 8F" ) );
    ik_ctx_update_targets = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? 8B 47 FC 8D 4F FC F3 0F 10 44 24" ) ).rel32( 1 );
    ik_ctx_solve_dependencies = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? 8B 44 24 40 8B 4D 0C" ) ).rel32( 1 );
    bone_setup_init_pose = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 EC 10 53 8B D9 89 55 F8 56 57 89 5D F4 8B 0B 89 4D F0" ) );
    accumulate_pose = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F0 B8 ? ? ? ? E8 ? ? ? ? A1" ) );
    bone_setup_calc_autoplay_sequences = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 EC 10 53 56 57 8B 7D 10 8B D9 F3 0F 11 5D ?" ) );
    bone_setup_calc_bone_adjust = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 81 EC ? ? ? ? 8B C1 89 54 24 04 89 44 24 2C 56 57 8B ?" ) );
    studio_hdr_ptr = g_memory->find_pattern( modules::client, xor_c_s( "8B B7 ? ? ? ? 89 74 24 20" ) );
    invalidate_physics_recursive = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 83 EC 0C 53 8B 5D 08 8B C3 56 83 E0 04" ) );
    trace_filter = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F0 83 EC 7C 56 52" ) );
    trace_filter_skip_entities = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? F3 0F 10 84 24 ? ? ? ? 8D 84 24 ? ? ? ? F3 0F 58 44 24" ) ).rel32( 1 );
    lookup_bone = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 53 56 8B F1 57 83 BE ? ? ? ? ? 75" ) );
    physics_simulate = g_memory->find_pattern( modules::client, xor_c_s( "56 8B F1 8B 8E ? ? ? ? 83 F9 ? 74 ? 0F B7 C1 C1 E0 ? 05 ? ? ? ? C1 E9 ? 39 48 ? 75 ? 8B 08 85 C9 74 ? 8B 01 FF 90 ? ? ? ? A1" ) );
    write_user_cmd = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 51 53 56 8B D9" ) );
    send_move_addr = g_memory->find_pattern( modules::engine, xor_c_s( "B8 ? ? ? ? 3B F0 0F 4F F0 89 5D FC" ) );
    view_render = g_memory->find_pattern( modules::client, xor_c_s( "8B 0D ? ? ? ? 8B 01 FF 50 4C 8B 06" ) ).add( 2 );
    post_think_physics = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 ? 81 EC ? ? ? ? 53 8B D9 56 57 83 BB" ) );
    simulate_player_simulated_entities = g_memory->find_pattern( modules::client, xor_c_s( "56 8B F1 57 8B BE ? ? ? ? 83 EF ? 78 ? 90" ) );
    cl_move = g_memory->find_pattern( modules::engine, xor_c_s( "55 8B EC 81 EC ? ? ? ? 53 56 57 8B 3D ? ? ? ? 8A" ) );
    glow_object = g_memory->find_pattern( modules::client, xor_c_s( "A1 ? ? ? ? A8 01 75 4B" ) );
    draw_hitbox = g_memory->find_pattern( modules::server, xor_c_s( "55 8B EC 81 EC ? ? ? ? 53 56 8B 35 ? ? ? ? 8B D9 57 8B CE" ) );
    server_edict = g_memory->find_pattern( modules::server, xor_c_s( "8B 15 ? ? ? ? 33 C9 83 7A 18 01" ) );
    model_renderable_animating = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? 85 C0 75 04 33 C0 5E C3 83" ) ).rel32( 1 );
    setup_clr_modulation = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 7D 08 ? 7E" ) );
    calc_viewmodel_view = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 EC 64 56 57" ) );
    set_collision_bounds = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? 0F BF 87" ) ).rel32( 1 );
    get_hud_ptr = g_memory->find_pattern( modules::client, xor_c_s( "B9 ? ? ? ? 0F 94 C0 0F B6 C0 50 68" ) ).add( 1 );
    find_hud_element = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 53 8B 5D 08 56 57 8B F9 33 F6 39 77 28" ) );
    get_sequence_activity = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 7D 08 FF 56 8B F1 74 3D" ) );
    return_addr_cam_think = g_memory->find_pattern( modules::client, xor_c_s( "85 C0 75 30 38 86" ) );
    send_net_msg = g_memory->find_pattern( modules::engine, xor_c_s( "55 8B EC 83 EC 08 56 8B F1 8B 4D 04" ) );
    assign_str = g_memory->find_pattern( modules::engine, xor_c_s( "55 8B EC 53 8B 5D 08 56 8B F1 85 DB 74 57 8B 4E 14 83 F9 10 72 04 8B 06 EB 02" ) );
    process_packet = g_memory->find_pattern( modules::engine, xor_c_s( "55 8B EC 83 E4 C0 81 EC ? ? ? ? 53 56 57 8B 7D 08 8B D9" ) );
    direct_present = g_memory->find_pattern( modules::gameoverlayrenderer, xor_c_s( "A1 ? ? ? ? 51 53 FF D0 8B F0" ) ).add( 1 );
    direct_device = g_memory->find_pattern( modules::shaderapidx9, xor_c_s( "A1 ? ? ? ? 50 8B 08 FF 51 0C" ) ).add( 1 );
    screen_matrix = g_memory->find_pattern( modules::client, xor_c_s( "0F 10 05 ? ? ? ? 8D 85 ? ? ? ? B9" ) );
    local = g_memory->find_pattern( modules::client, xor_c_s( "8B 0D ? ? ? ? 83 FF FF 74 07" ) ).add( 2 );
    global_vars = g_memory->find_pattern( modules::client, xor_c_s( "A1 ? ? ? ? F3 0F 10 40 ? 0F 5A C0 F2 0F 11 04" ) ).add( 1 );
    interpolate_server_entities = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 EC 1C 8B 0D ? ? ? ? 53 56" ) );
    read_packets = g_memory->find_pattern( modules::engine, xor_c_s( "53 8A D9 8B 0D ? ? ? ? 56 57 8B B9" ) );
    calc_view = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 53 8B 5D ? 56 57 FF 75 ? 8B F1" ) );
    add_renderable = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 56 8B 75 08 57 FF 75 18" ) );
    perform_screen_overlay = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 51 A1 ? ? ? ? 53 56 8B D9" ) );
    render_glow_boxes = g_memory->find_pattern( modules::client, xor_c_s( "53 8B DC 83 EC ? 83 E4 ? 83 C4 ? 55 8B 6B ? 89 6C ? ? 8B EC 83 EC ? 56 57 8B F9 89 7D ? 8B 4F" ) );
    clear_killfeed = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? 68 ? ? ? ? B9 ? ? ? ? E8 ? ? ? ? 8B F0 85 F6 74 19" ) ).rel32( 1 );
    clip_ray_to_hitbox = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 F3 0F 10 42" ) );
    read_packets_return_addr = g_memory->find_pattern( modules::engine, xor_c_s( "85 C0 0F 95 C0 84 C0 75 0C" ) );
    compute_hitbox_surrounding_box = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 F8 81 EC 24 04 00 00 ? ? ? ? ? ?" ) );
    clantag = g_memory->find_pattern( modules::engine, xor_c_s( "53 56 57 8B DA 8B F9 FF 15" ) );
    is_in_ironsight = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 53 56 8B F1 57 8B 4E 3C" ) );
    update_postscreen_effects = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 51 53 56 8B 35 ? ? ? ? 57 8B F9 85 F6 74" ) );
    is_breakable_entity = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 51 56 8B F1 85 F6 74 68" ) );
    process_interpolated_list = g_memory->find_pattern( modules::client, xor_c_s( "53 0F B7 1D ? ? ? ? 56" ) );
    allow_extrapolation = g_memory->find_pattern( modules::client, xor_c_s( "A2 ? ? ? ? 8B 45 E8" ) );
    get_exposure_range = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 51 80 3D ? ? ? ? ? 0F 57" ) );
    temp_entities = g_memory->find_pattern( modules::engine, xor_c_s( "55 8B EC 83 E4 F8 83 EC 4C A1 ? ? ? ? 80" ) );
    send_datagram = g_memory->find_pattern( modules::engine, xor_c_s( "55 8B EC 83 E4 F0 B8 ? ? ? ? E8 ? ? ? ? 56 57 8B F9 89 7C 24 18" ) );
    thread_id_allocated = g_memory->find_pattern( modules::tier0, xor_c_s( "C6 86 ? ? ? ? ? 83 05 ? ? ? ? ? 5E 75 04 33 C0 87 07" ) ).add( 2 );
    trace_filter_to_head_collision = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 56 8B 75 0C 57 8B F9 F7 C6 ? ? ? ?" ) );
    want_reticle_shown = g_memory->find_pattern( modules::client, xor_c_s( "53 56 57 8B 3D ? ? ? ? 8B F1 85 FF" ) );
    return_addr_process_input = g_memory->find_pattern( modules::client, xor_c_s( "84 C0 74 ? 68 ? ? ? ? 8D 8C 24" ) );
    viewmodel_interpolate = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 ? 83 EC ? 53 56 8B F1 57 83 BE ? ? ? ? ? 75 ? 8B 46 ? 8D 4E ? FF 50 ? 85 C0 74 ? 8B CE E8 ? ? ? ? 8B 9E" ) );
    calc_shotgun_spread = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? EB 38 83 EC 08" ) ).rel32( 1 );
    weapon_shootpos = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 56 8B 75 08 57 8B F9 56 8B 07 FF 90 ? ? ? ?" ) );
    item_system = g_memory->find_pattern( modules::client, xor_c_s( "A1 ? ? ? ? 85 C0 75 53" ) );
    show_and_update_selection = g_memory->find_pattern( modules::client, xor_c_s( "E8 ? ? ? ? A1 ? ? ? ? F3 0F 10 40 ? C6 83" ) ).rel32( 1 );
    update_all_viewmodel_addons = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 ? 83 EC ? 53 8B D9 56 57 8B 03 FF 90 ? ? ? ? 8B F8 89 7C 24 ? 85 FF 0F 84 ? ? ? ? 8B 17 8B CF" ) );
    get_viewmodel = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 ? 83 EC ? 53 8B D9 56 57 8B 03 FF 90 ? ? ? ? 8B F8 89 7C 24 ? 85 FF 0F 84 ? ? ? ? 8B 17 8B CF" ) );
    calc_absolute_position = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 ? 83 EC ? 80 3D ? ? ? ? ? 56 57 8B F9" ) );
    clientside_animation_list = g_memory->find_pattern( modules::client, xor_c_s( "A1 ? ? ? ? F6 44" ) ).add( 1 );

    get_weapon_prefix = g_memory->find_pattern( modules::client, xor_c_s( "53 56 8B F1 57 33 FF 8B 4E ? 8B 01" ) );
    find_mapping = g_memory->find_pattern( modules::client, xor_c_s( "55 8B EC 83 E4 ? 81 EC ? ? ? ? 53 56 57 8B F9 8B 17" ) );
    select_sequence_from_mods = g_memory->find_pattern( modules::server, xor_c_s( "55 8B EC 83 EC ? 53 56 8B 75 ? 8B D9 57 89 5D ? 8B 16" ) );
  }
}